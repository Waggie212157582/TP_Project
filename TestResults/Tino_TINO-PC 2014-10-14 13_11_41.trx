<?xml version="1.0" encoding="UTF-8"?>
<TestRun id="6cf9777a-9ce8-46a9-a90a-9c6a99d5e07a" name="Tino@TINO-PC 2014-10-14 13:11:41" runUser="Tino-PC\Tino" xmlns="http://microsoft.com/schemas/VisualStudio/TeamTest/2010">
  <TestSettings name="Local" id="3caa583e-b5f9-4780-b502-695f744f7d3c">
    <Description>These are default test settings for a local test run.</Description>
    <Deployment enabled="false" runDeploymentRoot="Tino_TINO-PC 2014-10-14 13_11_41">
      <DeploymentItem filename="C:\Users\Tino\Desktop\TP\TP\bin\Debug\NHibernate.dll" />
      <DeploymentItem filename="C:\Users\Tino\Desktop\TP\TP\bin\Debug\Iesi.Collections.dll" />
      <DeploymentItem filename="C:\Users\Tino\Desktop\TP\TP\bin\Debug\System.Data.SqlServerCe.dll" />
      <DeploymentItem filename="C:\Users\Tino\Desktop\TP\TP\bin\Debug\TP.exe" />
    </Deployment>
    <Execution>
      <TestTypeSpecific />
      <AgentRule name="Execution Agents">
      </AgentRule>
    </Execution>
  </TestSettings>
  <Times creation="2014-10-14T13:11:41.1540811-07:00" queuing="2014-10-14T13:11:41.3110900-07:00" start="2014-10-14T13:11:41.4820998-07:00" finish="2014-10-14T13:14:13.2167785-07:00" />
  <ResultSummary outcome="Failed">
    <Counters total="9" executed="9" error="0" failed="9" timeout="0" aborted="0" inconclusive="0" passedButRunAborted="0" notRunnable="0" notExecuted="0" disconnected="0" warning="0" passed="0" completed="0" inProgress="0" pending="0" />
  </ResultSummary>
  <TestDefinitions>
    <UnitTest name="TestAllAuthorizer" storage="c:\users\tino\desktop\tp\tptest\bin\debug\tptest.dll" id="5afea8c9-d3ab-4ebf-9553-a2458d7ea6cf">
      <Execution id="54e1ac5f-592a-4bbc-a5ea-99d490931b9d" />
      <TestMethod codeBase="C:/Users/Tino/Desktop/TP/TPTest/bin/Debug/TPTest.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="TPTest.repository.TestAuthorizer, TPTest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="TestAllAuthorizer" />
    </UnitTest>
    <UnitTest name="TestAllEmployee" storage="c:\users\tino\desktop\tp\tptest\bin\debug\tptest.dll" id="f44b82e6-9fa6-66d0-f37d-d7eea6349f41">
      <Execution id="cd56f6c3-3262-458d-9b12-820c08fe8882" />
      <TestMethod codeBase="C:/Users/Tino/Desktop/TP/TPTest/bin/Debug/TPTest.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="TPTest.Repository.TestEmployee, TPTest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="TestAllEmployee" />
    </UnitTest>
    <UnitTest name="TestAllPatientAddress" storage="c:\users\tino\desktop\tp\tptest\bin\debug\tptest.dll" id="a4aaea69-8e99-80da-06a2-51caab4d2873">
      <Execution id="bd10568d-b2a2-4ac8-872d-fa7710228e39" />
      <TestMethod codeBase="C:/Users/Tino/Desktop/TP/TPTest/bin/Debug/TPTest.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="TPTest.repository.TestPatientAddress, TPTest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="TestAllPatientAddress" />
    </UnitTest>
    <UnitTest name="TestAllTerminalUser" storage="c:\users\tino\desktop\tp\tptest\bin\debug\tptest.dll" id="47ca51c2-3965-9371-4f2b-e7525cbf149b">
      <Execution id="1cf7b463-1a48-4791-b745-9f6288c60a55" />
      <TestMethod codeBase="C:/Users/Tino/Desktop/TP/TPTest/bin/Debug/TPTest.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="TPTest.Repository.TestTerminalUser, TPTest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="TestAllTerminalUser" />
    </UnitTest>
    <UnitTest name="TestAllAppoinment" storage="c:\users\tino\desktop\tp\tptest\bin\debug\tptest.dll" id="3d41bc01-b249-954e-ed91-c15c60ffeea0">
      <Execution id="ad04854d-21fe-46d6-900c-6922f6184eb8" />
      <TestMethod codeBase="C:/Users/Tino/Desktop/TP/TPTest/bin/Debug/TPTest.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="TPTest.Repository.TestAppointment, TPTest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="TestAllAppoinment" />
    </UnitTest>
    <UnitTest name="TestAllPatient" storage="c:\users\tino\desktop\tp\tptest\bin\debug\tptest.dll" id="6e26cf5a-168a-510e-410f-d0545d2f9604">
      <Execution id="7f24419c-e37a-4a9f-8c01-a882bb9f380d" />
      <TestMethod codeBase="C:/Users/Tino/Desktop/TP/TPTest/bin/Debug/TPTest.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="TPTest.TestPatient, TPTest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="TestAllPatient" />
    </UnitTest>
    <UnitTest name="TestAllProcedures" storage="c:\users\tino\desktop\tp\tptest\bin\debug\tptest.dll" id="52433816-34f4-2a6c-a0bc-1c1ffc38cbb9">
      <Execution id="92b4f768-5396-4c36-a504-401f6b4d91cc" />
      <TestMethod codeBase="C:/Users/Tino/Desktop/TP/TPTest/bin/Debug/TPTest.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="TPTest.Repository.TestProcedure, TPTest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="TestAllProcedures" />
    </UnitTest>
    <UnitTest name="TestAllPaymentData" storage="c:\users\tino\desktop\tp\tptest\bin\debug\tptest.dll" id="ef02c3d0-ff67-1dfc-598e-2b27d85d78c5">
      <Execution id="e47aebf0-4852-4247-a750-4ba16a6b27c8" />
      <TestMethod codeBase="C:/Users/Tino/Desktop/TP/TPTest/bin/Debug/TPTest.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="TPTest.Repository.TestPaymentData, TPTest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="TestAllPaymentData" />
    </UnitTest>
    <UnitTest name="TestAllPayment" storage="c:\users\tino\desktop\tp\tptest\bin\debug\tptest.dll" id="d023ff9b-12c5-5440-f6f4-f338c74d902d">
      <Execution id="051e0579-2def-46e1-a2fc-67939dc4ad72" />
      <TestMethod codeBase="C:/Users/Tino/Desktop/TP/TPTest/bin/Debug/TPTest.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="TPTest.Repository.TestPayment, TPTest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="TestAllPayment" />
    </UnitTest>
  </TestDefinitions>
  <TestLists>
    <TestList name="Results Not in a List" id="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestList name="All Loaded Results" id="19431567-8539-422a-85d7-44ee4e166bda" />
  </TestLists>
  <TestEntries>
    <TestEntry testId="3d41bc01-b249-954e-ed91-c15c60ffeea0" executionId="ad04854d-21fe-46d6-900c-6922f6184eb8" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="47ca51c2-3965-9371-4f2b-e7525cbf149b" executionId="1cf7b463-1a48-4791-b745-9f6288c60a55" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="52433816-34f4-2a6c-a0bc-1c1ffc38cbb9" executionId="92b4f768-5396-4c36-a504-401f6b4d91cc" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5afea8c9-d3ab-4ebf-9553-a2458d7ea6cf" executionId="54e1ac5f-592a-4bbc-a5ea-99d490931b9d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6e26cf5a-168a-510e-410f-d0545d2f9604" executionId="7f24419c-e37a-4a9f-8c01-a882bb9f380d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a4aaea69-8e99-80da-06a2-51caab4d2873" executionId="bd10568d-b2a2-4ac8-872d-fa7710228e39" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d023ff9b-12c5-5440-f6f4-f338c74d902d" executionId="051e0579-2def-46e1-a2fc-67939dc4ad72" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ef02c3d0-ff67-1dfc-598e-2b27d85d78c5" executionId="e47aebf0-4852-4247-a750-4ba16a6b27c8" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f44b82e6-9fa6-66d0-f37d-d7eea6349f41" executionId="cd56f6c3-3262-458d-9b12-820c08fe8882" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
  </TestEntries>
  <Results>
    <UnitTestResult executionId="ad04854d-21fe-46d6-900c-6922f6184eb8" testId="3d41bc01-b249-954e-ed91-c15c60ffeea0" testName="TestAllAppoinment" computerName="TINO-PC" duration="00:00:31.7867612" startTime="2014-10-14T13:11:41.5251023-07:00" endTime="2014-10-14T13:12:14.8810101-07:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ad04854d-21fe-46d6-900c-6922f6184eb8">
      <Output>
        <StdOut>alter table Treatment  drop foreign key FK36967990506A3C44


    
alter table Appointment  drop foreign key FKBB6A20C0EBCE5ED0


    
alter table PatientAddress  drop foreign key FKB4CD86E1EBCE5ED0


    
alter table PaymentData  drop foreign key FKD434861036646595


    
alter table PaymentData  drop foreign key FKD4348610EBCE5ED0


    
alter table Allergy  drop foreign key FKECE328A61A023E82


    drop table if exists Procedures

    drop table if exists Treatment

    drop table if exists Appointment

    drop table if exists PatientAddress

    drop table if exists MedicalHistory

    drop table if exists Authorizer

    drop table if exists Employee

    drop table if exists NextOfKin

    drop table if exists Payment

    drop table if exists PaymentData

    drop table if exists TerminalUser

    drop table if exists Allergy

    drop table if exists Patient

    create table Procedures (
        id BIGINT NOT NULL AUTO_INCREMENT,
       procedureCode INTEGER,
       procedureName VARCHAR(255),
       procedurePrice DOUBLE,
       primary key (id)
    )

    create table Treatment (
        treatID BIGINT NOT NULL AUTO_INCREMENT,
       treatCode INTEGER,
       treatName VARCHAR(255),
       treatIsUrgent TINYINT(1),
       MedHistId BIGINT,
       TreatIdIndex INTEGER,
       primary key (treatID)
    )

    create table Appointment (
        id BIGINT NOT NULL AUTO_INCREMENT,
       appId VARCHAR(255),
       reasonForVisit VARCHAR(255),
       appDate VARCHAR(255),
       appTime VARCHAR(255),
       patientNum BIGINT,
       index2 INTEGER,
       primary key (id)
    )

    create table PatientAddress (
        id BIGINT NOT NULL AUTO_INCREMENT,
       streetNameNo VARCHAR(255),
       suburb VARCHAR(255),
       city VARCHAR(255),
       postalCode VARCHAR(255),
       addressType VARCHAR(255),
       patientNum BIGINT,
       index1 INTEGER,
       primary key (id)
    )

    create table MedicalHistory (
        MedHistId BIGINT NOT NULL AUTO_INCREMENT,
       rheumaticFever TINYINT(1),
       ifYesRhemDate VARCHAR(255),
       diabetic TINYINT(1),
       pophyris TINYINT(1),
       recentIllnesses TINYINT(1),
       bleeder TINYINT(1),
       additionalInfo VARCHAR(255),
       patientNum VARCHAR(255),
       primary key (MedHistId)
    )

    create table Authorizer (
        id BIGINT NOT NULL AUTO_INCREMENT,
       empNo VARCHAR(255),
       authCode VARCHAR(255),
       secQuestion VARCHAR(255),
       secAnswer VARCHAR(255),
       primary key (id)
    )

    create table Employee (
        id BIGINT NOT NULL AUTO_INCREMENT,
       empId VARCHAR(255),
       empNo VARCHAR(255),
       empName VARCHAR(255),
       empSurname VARCHAR(255),
       empGender VARCHAR(255),
       empAddress VARCHAR(255),
       jobTitle VARCHAR(255),
       empType VARCHAR(255),
       primary key (id)
    )

    create table NextOfKin (
        id BIGINT NOT NULL AUTO_INCREMENT,
       kinSurname VARCHAR(255),
       kinName VARCHAR(255),
       kinAddress VARCHAR(255),
       kinTelNo VARCHAR(255),
       kinRelationship VARCHAR(255),
       patientNum VARCHAR(255),
       primary key (id)
    )

    create table Payment (
        id BIGINT NOT NULL AUTO_INCREMENT,
       paySurname VARCHAR(255),
       payName VARCHAR(255),
       payIdNumber BIGINT,
       payAddress VARCHAR(255),
       payTelNo VARCHAR(255),
       payTelNoWork VARCHAR(255),
       payRelationship VARCHAR(255),
       payOccupation VARCHAR(255),
       primary key (id)
    )

    create table PaymentData (
        id BIGINT NOT NULL AUTO_INCREMENT,
       paymentDate VARCHAR(255),
       paymentTime VARCHAR(255),
       numberOfProcedures INTEGER,
       tax DOUBLE,
       total DOUBLE,
       change DOUBLE,
       userName BIGINT,
       idx INTEGER,
       patientNum BIGINT,
       index3 INTEGER,
       primary key (id)
    )</StdOut>
        <ErrorInfo>
          <Message>Test method TPTest.Repository.TestAppointment.TestAllAppoinment threw exception: 
NHibernate.HibernateException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'change DOUBLE, userName BIGINT, idx INTEGER, patientNum BIGINT, index3 INTEGER, ' at line 1 ---&gt; MySql.Data.MySqlClient.MySqlException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'change DOUBLE, userName BIGINT, idx INTEGER, patientNum BIGINT, index3 INTEGER, ' at line 1</Message>
          <StackTrace>    at MySql.Data.MySqlClient.MySqlStream.ReadPacket()
   at MySql.Data.MySqlClient.NativeDriver.GetResult(Int32&amp; affectedRow, Int64&amp; insertedId)
   at MySql.Data.MySqlClient.Driver.GetResult(Int32 statementId, Int32&amp; affectedRows, Int64&amp; insertedId)
   at MySql.Data.MySqlClient.Driver.NextResult(Int32 statementId, Boolean force)
   at MySql.Data.MySqlClient.MySqlDataReader.NextResult()
   at MySql.Data.MySqlClient.MySqlCommand.ExecuteReader(CommandBehavior behavior)
   at MySql.Data.MySqlClient.MySqlCommand.ExecuteNonQuery()
   at NHibernate.Tool.hbm2ddl.SchemaExport.ExecuteSql(IDbCommand cmd, String sql)
   at NHibernate.Tool.hbm2ddl.SchemaExport.Execute(Action`1 scriptAction, Boolean export, Boolean throwOnError, TextWriter exportOutput, IDbCommand statement, String sql)
   at NHibernate.Tool.hbm2ddl.SchemaExport.Execute(Action`1 scriptAction, Boolean export, Boolean justDrop, IDbConnection connection, TextWriter exportOutput)
   at NHibernate.Tool.hbm2ddl.SchemaExport.Execute(Action`1 scriptAction, Boolean export, Boolean justDrop)
 --- End of inner exception stack trace ---
    at NHibernate.Tool.hbm2ddl.SchemaExport.Execute(Action`1 scriptAction, Boolean export, Boolean justDrop)
   at NHibernate.Tool.hbm2ddl.SchemaExport.Execute(Boolean script, Boolean export, Boolean justDrop)
   at TP.Config.ConnectionConfig.loadAppointmentConfig() in C:\Users\Tino\Desktop\TP\TP\config\ConnectionConfig.cs:line 34
   at TPTest.Repository.TestAppointment.testCreate() in C:\Users\Tino\Desktop\TP\TPTest\repository\TestAppointment.cs:line 29
   at TPTest.Repository.TestAppointment.TestAllAppoinment() in C:\Users\Tino\Desktop\TP\TPTest\repository\TestAppointment.cs:line 21
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="1cf7b463-1a48-4791-b745-9f6288c60a55" testId="47ca51c2-3965-9371-4f2b-e7525cbf149b" testName="TestAllTerminalUser" computerName="TINO-PC" duration="00:00:11.4139633" startTime="2014-10-14T13:12:14.9040114-07:00" endTime="2014-10-14T13:12:26.3926686-07:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1cf7b463-1a48-4791-b745-9f6288c60a55">
      <Output>
        <StdOut>alter table Treatment  drop foreign key FK36967990506A3C44


    
alter table Appointment  drop foreign key FKBB6A20C0EBCE5ED0


    
alter table PatientAddress  drop foreign key FKB4CD86E1EBCE5ED0


    
alter table PaymentData  drop foreign key FKD434861036646595


    
alter table PaymentData  drop foreign key FKD4348610EBCE5ED0


    
alter table Allergy  drop foreign key FKECE328A61A023E82


    drop table if exists Procedures

    drop table if exists Treatment

    drop table if exists Appointment

    drop table if exists PatientAddress

    drop table if exists MedicalHistory

    drop table if exists Authorizer

    drop table if exists Employee

    drop table if exists NextOfKin

    drop table if exists Payment

    drop table if exists PaymentData

    drop table if exists TerminalUser

    drop table if exists Allergy

    drop table if exists Patient

    create table Procedures (
        id BIGINT NOT NULL AUTO_INCREMENT,
       procedureCode INTEGER,
       procedureName VARCHAR(255),
       procedurePrice DOUBLE,
       primary key (id)
    )

    create table Treatment (
        treatID BIGINT NOT NULL AUTO_INCREMENT,
       treatCode INTEGER,
       treatName VARCHAR(255),
       treatIsUrgent TINYINT(1),
       MedHistId BIGINT,
       TreatIdIndex INTEGER,
       primary key (treatID)
    )

    create table Appointment (
        id BIGINT NOT NULL AUTO_INCREMENT,
       appId VARCHAR(255),
       reasonForVisit VARCHAR(255),
       appDate VARCHAR(255),
       appTime VARCHAR(255),
       patientNum BIGINT,
       index2 INTEGER,
       primary key (id)
    )

    create table PatientAddress (
        id BIGINT NOT NULL AUTO_INCREMENT,
       streetNameNo VARCHAR(255),
       suburb VARCHAR(255),
       city VARCHAR(255),
       postalCode VARCHAR(255),
       addressType VARCHAR(255),
       patientNum BIGINT,
       index1 INTEGER,
       primary key (id)
    )

    create table MedicalHistory (
        MedHistId BIGINT NOT NULL AUTO_INCREMENT,
       rheumaticFever TINYINT(1),
       ifYesRhemDate VARCHAR(255),
       diabetic TINYINT(1),
       pophyris TINYINT(1),
       recentIllnesses TINYINT(1),
       bleeder TINYINT(1),
       additionalInfo VARCHAR(255),
       patientNum VARCHAR(255),
       primary key (MedHistId)
    )

    create table Authorizer (
        id BIGINT NOT NULL AUTO_INCREMENT,
       empNo VARCHAR(255),
       authCode VARCHAR(255),
       secQuestion VARCHAR(255),
       secAnswer VARCHAR(255),
       primary key (id)
    )

    create table Employee (
        id BIGINT NOT NULL AUTO_INCREMENT,
       empId VARCHAR(255),
       empNo VARCHAR(255),
       empName VARCHAR(255),
       empSurname VARCHAR(255),
       empGender VARCHAR(255),
       empAddress VARCHAR(255),
       jobTitle VARCHAR(255),
       empType VARCHAR(255),
       primary key (id)
    )

    create table NextOfKin (
        id BIGINT NOT NULL AUTO_INCREMENT,
       kinSurname VARCHAR(255),
       kinName VARCHAR(255),
       kinAddress VARCHAR(255),
       kinTelNo VARCHAR(255),
       kinRelationship VARCHAR(255),
       patientNum VARCHAR(255),
       primary key (id)
    )

    create table Payment (
        id BIGINT NOT NULL AUTO_INCREMENT,
       paySurname VARCHAR(255),
       payName VARCHAR(255),
       payIdNumber BIGINT,
       payAddress VARCHAR(255),
       payTelNo VARCHAR(255),
       payTelNoWork VARCHAR(255),
       payRelationship VARCHAR(255),
       payOccupation VARCHAR(255),
       primary key (id)
    )

    create table PaymentData (
        id BIGINT NOT NULL AUTO_INCREMENT,
       paymentDate VARCHAR(255),
       paymentTime VARCHAR(255),
       numberOfProcedures INTEGER,
       tax DOUBLE,
       total DOUBLE,
       change DOUBLE,
       userName BIGINT,
       idx INTEGER,
       patientNum BIGINT,
       index3 INTEGER,
       primary key (id)
    )</StdOut>
        <ErrorInfo>
          <Message>Test method TPTest.Repository.TestTerminalUser.TestAllTerminalUser threw exception: 
NHibernate.HibernateException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'change DOUBLE, userName BIGINT, idx INTEGER, patientNum BIGINT, index3 INTEGER, ' at line 1 ---&gt; MySql.Data.MySqlClient.MySqlException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'change DOUBLE, userName BIGINT, idx INTEGER, patientNum BIGINT, index3 INTEGER, ' at line 1</Message>
          <StackTrace>    at MySql.Data.MySqlClient.MySqlStream.ReadPacket()
   at MySql.Data.MySqlClient.NativeDriver.GetResult(Int32&amp; affectedRow, Int64&amp; insertedId)
   at MySql.Data.MySqlClient.Driver.GetResult(Int32 statementId, Int32&amp; affectedRows, Int64&amp; insertedId)
   at MySql.Data.MySqlClient.Driver.NextResult(Int32 statementId, Boolean force)
   at MySql.Data.MySqlClient.MySqlDataReader.NextResult()
   at MySql.Data.MySqlClient.MySqlCommand.ExecuteReader(CommandBehavior behavior)
   at MySql.Data.MySqlClient.MySqlCommand.ExecuteNonQuery()
   at NHibernate.Tool.hbm2ddl.SchemaExport.ExecuteSql(IDbCommand cmd, String sql)
   at NHibernate.Tool.hbm2ddl.SchemaExport.Execute(Action`1 scriptAction, Boolean export, Boolean throwOnError, TextWriter exportOutput, IDbCommand statement, String sql)
   at NHibernate.Tool.hbm2ddl.SchemaExport.Execute(Action`1 scriptAction, Boolean export, Boolean justDrop, IDbConnection connection, TextWriter exportOutput)
   at NHibernate.Tool.hbm2ddl.SchemaExport.Execute(Action`1 scriptAction, Boolean export, Boolean justDrop)
 --- End of inner exception stack trace ---
    at NHibernate.Tool.hbm2ddl.SchemaExport.Execute(Action`1 scriptAction, Boolean export, Boolean justDrop)
   at NHibernate.Tool.hbm2ddl.SchemaExport.Execute(Boolean script, Boolean export, Boolean justDrop)
   at TP.Config.ConnectionConfig.loadPatientAddressConfig() in C:\Users\Tino\Desktop\TP\TP\config\ConnectionConfig.cs:line 90
   at TPTest.Repository.TestTerminalUser.testCreate() in C:\Users\Tino\Desktop\TP\TPTest\repository\TestTerminalUser.cs:line 28
   at TPTest.Repository.TestTerminalUser.TestAllTerminalUser() in C:\Users\Tino\Desktop\TP\TPTest\repository\TestTerminalUser.cs:line 20
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="92b4f768-5396-4c36-a504-401f6b4d91cc" testId="52433816-34f4-2a6c-a0bc-1c1ffc38cbb9" testName="TestAllProcedures" computerName="TINO-PC" duration="00:00:17.5781517" startTime="2014-10-14T13:12:26.4706730-07:00" endTime="2014-10-14T13:12:44.1126821-07:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="92b4f768-5396-4c36-a504-401f6b4d91cc">
      <Output>
        <StdOut>alter table Treatment  drop foreign key FK36967990506A3C44


    
alter table Appointment  drop foreign key FKBB6A20C0EBCE5ED0


    
alter table PatientAddress  drop foreign key FKB4CD86E1EBCE5ED0


    
alter table PaymentData  drop foreign key FKD434861036646595


    
alter table PaymentData  drop foreign key FKD4348610EBCE5ED0


    
alter table Allergy  drop foreign key FKECE328A61A023E82


    drop table if exists Procedures

    drop table if exists Treatment

    drop table if exists Appointment

    drop table if exists PatientAddress

    drop table if exists MedicalHistory

    drop table if exists Authorizer

    drop table if exists Employee

    drop table if exists NextOfKin

    drop table if exists Payment

    drop table if exists PaymentData

    drop table if exists TerminalUser

    drop table if exists Allergy

    drop table if exists Patient

    create table Procedures (
        id BIGINT NOT NULL AUTO_INCREMENT,
       procedureCode INTEGER,
       procedureName VARCHAR(255),
       procedurePrice DOUBLE,
       primary key (id)
    )

    create table Treatment (
        treatID BIGINT NOT NULL AUTO_INCREMENT,
       treatCode INTEGER,
       treatName VARCHAR(255),
       treatIsUrgent TINYINT(1),
       MedHistId BIGINT,
       TreatIdIndex INTEGER,
       primary key (treatID)
    )

    create table Appointment (
        id BIGINT NOT NULL AUTO_INCREMENT,
       appId VARCHAR(255),
       reasonForVisit VARCHAR(255),
       appDate VARCHAR(255),
       appTime VARCHAR(255),
       patientNum BIGINT,
       index2 INTEGER,
       primary key (id)
    )

    create table PatientAddress (
        id BIGINT NOT NULL AUTO_INCREMENT,
       streetNameNo VARCHAR(255),
       suburb VARCHAR(255),
       city VARCHAR(255),
       postalCode VARCHAR(255),
       addressType VARCHAR(255),
       patientNum BIGINT,
       index1 INTEGER,
       primary key (id)
    )

    create table MedicalHistory (
        MedHistId BIGINT NOT NULL AUTO_INCREMENT,
       rheumaticFever TINYINT(1),
       ifYesRhemDate VARCHAR(255),
       diabetic TINYINT(1),
       pophyris TINYINT(1),
       recentIllnesses TINYINT(1),
       bleeder TINYINT(1),
       additionalInfo VARCHAR(255),
       patientNum VARCHAR(255),
       primary key (MedHistId)
    )

    create table Authorizer (
        id BIGINT NOT NULL AUTO_INCREMENT,
       empNo VARCHAR(255),
       authCode VARCHAR(255),
       secQuestion VARCHAR(255),
       secAnswer VARCHAR(255),
       primary key (id)
    )

    create table Employee (
        id BIGINT NOT NULL AUTO_INCREMENT,
       empId VARCHAR(255),
       empNo VARCHAR(255),
       empName VARCHAR(255),
       empSurname VARCHAR(255),
       empGender VARCHAR(255),
       empAddress VARCHAR(255),
       jobTitle VARCHAR(255),
       empType VARCHAR(255),
       primary key (id)
    )

    create table NextOfKin (
        id BIGINT NOT NULL AUTO_INCREMENT,
       kinSurname VARCHAR(255),
       kinName VARCHAR(255),
       kinAddress VARCHAR(255),
       kinTelNo VARCHAR(255),
       kinRelationship VARCHAR(255),
       patientNum VARCHAR(255),
       primary key (id)
    )

    create table Payment (
        id BIGINT NOT NULL AUTO_INCREMENT,
       paySurname VARCHAR(255),
       payName VARCHAR(255),
       payIdNumber BIGINT,
       payAddress VARCHAR(255),
       payTelNo VARCHAR(255),
       payTelNoWork VARCHAR(255),
       payRelationship VARCHAR(255),
       payOccupation VARCHAR(255),
       primary key (id)
    )

    create table PaymentData (
        id BIGINT NOT NULL AUTO_INCREMENT,
       paymentDate VARCHAR(255),
       paymentTime VARCHAR(255),
       numberOfProcedures INTEGER,
       tax DOUBLE,
       total DOUBLE,
       change DOUBLE,
       userName BIGINT,
       idx INTEGER,
       patientNum BIGINT,
       index3 INTEGER,
       primary key (id)
    )</StdOut>
        <ErrorInfo>
          <Message>Test method TPTest.Repository.TestProcedure.TestAllProcedures threw exception: 
NHibernate.HibernateException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'change DOUBLE, userName BIGINT, idx INTEGER, patientNum BIGINT, index3 INTEGER, ' at line 1 ---&gt; MySql.Data.MySqlClient.MySqlException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'change DOUBLE, userName BIGINT, idx INTEGER, patientNum BIGINT, index3 INTEGER, ' at line 1</Message>
          <StackTrace>    at MySql.Data.MySqlClient.MySqlStream.ReadPacket()
   at MySql.Data.MySqlClient.NativeDriver.GetResult(Int32&amp; affectedRow, Int64&amp; insertedId)
   at MySql.Data.MySqlClient.Driver.GetResult(Int32 statementId, Int32&amp; affectedRows, Int64&amp; insertedId)
   at MySql.Data.MySqlClient.Driver.NextResult(Int32 statementId, Boolean force)
   at MySql.Data.MySqlClient.MySqlDataReader.NextResult()
   at MySql.Data.MySqlClient.MySqlCommand.ExecuteReader(CommandBehavior behavior)
   at MySql.Data.MySqlClient.MySqlCommand.ExecuteNonQuery()
   at NHibernate.Tool.hbm2ddl.SchemaExport.ExecuteSql(IDbCommand cmd, String sql)
   at NHibernate.Tool.hbm2ddl.SchemaExport.Execute(Action`1 scriptAction, Boolean export, Boolean throwOnError, TextWriter exportOutput, IDbCommand statement, String sql)
   at NHibernate.Tool.hbm2ddl.SchemaExport.Execute(Action`1 scriptAction, Boolean export, Boolean justDrop, IDbConnection connection, TextWriter exportOutput)
   at NHibernate.Tool.hbm2ddl.SchemaExport.Execute(Action`1 scriptAction, Boolean export, Boolean justDrop)
 --- End of inner exception stack trace ---
    at NHibernate.Tool.hbm2ddl.SchemaExport.Execute(Action`1 scriptAction, Boolean export, Boolean justDrop)
   at NHibernate.Tool.hbm2ddl.SchemaExport.Execute(Boolean script, Boolean export, Boolean justDrop)
   at TP.Config.ConnectionConfig.loadProcedureConfig() in C:\Users\Tino\Desktop\TP\TP\config\ConnectionConfig.cs:line 74
   at TPTest.Repository.TestProcedure.testCreate() in C:\Users\Tino\Desktop\TP\TPTest\repository\TestProcedure.cs:line 28
   at TPTest.Repository.TestProcedure.TestAllProcedures() in C:\Users\Tino\Desktop\TP\TPTest\repository\TestProcedure.cs:line 20
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="54e1ac5f-592a-4bbc-a5ea-99d490931b9d" testId="5afea8c9-d3ab-4ebf-9553-a2458d7ea6cf" testName="TestAllAuthorizer" computerName="TINO-PC" duration="00:00:12.5467926" startTime="2014-10-14T13:12:44.1446839-07:00" endTime="2014-10-14T13:12:56.7394043-07:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="54e1ac5f-592a-4bbc-a5ea-99d490931b9d">
      <Output>
        <StdOut>alter table Treatment  drop foreign key FK36967990506A3C44


    
alter table Appointment  drop foreign key FKBB6A20C0EBCE5ED0


    
alter table PatientAddress  drop foreign key FKB4CD86E1EBCE5ED0


    
alter table PaymentData  drop foreign key FKD434861036646595


    
alter table PaymentData  drop foreign key FKD4348610EBCE5ED0


    
alter table Allergy  drop foreign key FKECE328A61A023E82


    drop table if exists Procedures

    drop table if exists Treatment

    drop table if exists Appointment

    drop table if exists PatientAddress

    drop table if exists MedicalHistory

    drop table if exists Authorizer

    drop table if exists Employee

    drop table if exists NextOfKin

    drop table if exists Payment

    drop table if exists PaymentData

    drop table if exists TerminalUser

    drop table if exists Allergy

    drop table if exists Patient

    create table Procedures (
        id BIGINT NOT NULL AUTO_INCREMENT,
       procedureCode INTEGER,
       procedureName VARCHAR(255),
       procedurePrice DOUBLE,
       primary key (id)
    )

    create table Treatment (
        treatID BIGINT NOT NULL AUTO_INCREMENT,
       treatCode INTEGER,
       treatName VARCHAR(255),
       treatIsUrgent TINYINT(1),
       MedHistId BIGINT,
       TreatIdIndex INTEGER,
       primary key (treatID)
    )

    create table Appointment (
        id BIGINT NOT NULL AUTO_INCREMENT,
       appId VARCHAR(255),
       reasonForVisit VARCHAR(255),
       appDate VARCHAR(255),
       appTime VARCHAR(255),
       patientNum BIGINT,
       index2 INTEGER,
       primary key (id)
    )

    create table PatientAddress (
        id BIGINT NOT NULL AUTO_INCREMENT,
       streetNameNo VARCHAR(255),
       suburb VARCHAR(255),
       city VARCHAR(255),
       postalCode VARCHAR(255),
       addressType VARCHAR(255),
       patientNum BIGINT,
       index1 INTEGER,
       primary key (id)
    )

    create table MedicalHistory (
        MedHistId BIGINT NOT NULL AUTO_INCREMENT,
       rheumaticFever TINYINT(1),
       ifYesRhemDate VARCHAR(255),
       diabetic TINYINT(1),
       pophyris TINYINT(1),
       recentIllnesses TINYINT(1),
       bleeder TINYINT(1),
       additionalInfo VARCHAR(255),
       patientNum VARCHAR(255),
       primary key (MedHistId)
    )

    create table Authorizer (
        id BIGINT NOT NULL AUTO_INCREMENT,
       empNo VARCHAR(255),
       authCode VARCHAR(255),
       secQuestion VARCHAR(255),
       secAnswer VARCHAR(255),
       primary key (id)
    )

    create table Employee (
        id BIGINT NOT NULL AUTO_INCREMENT,
       empId VARCHAR(255),
       empNo VARCHAR(255),
       empName VARCHAR(255),
       empSurname VARCHAR(255),
       empGender VARCHAR(255),
       empAddress VARCHAR(255),
       jobTitle VARCHAR(255),
       empType VARCHAR(255),
       primary key (id)
    )

    create table NextOfKin (
        id BIGINT NOT NULL AUTO_INCREMENT,
       kinSurname VARCHAR(255),
       kinName VARCHAR(255),
       kinAddress VARCHAR(255),
       kinTelNo VARCHAR(255),
       kinRelationship VARCHAR(255),
       patientNum VARCHAR(255),
       primary key (id)
    )

    create table Payment (
        id BIGINT NOT NULL AUTO_INCREMENT,
       paySurname VARCHAR(255),
       payName VARCHAR(255),
       payIdNumber BIGINT,
       payAddress VARCHAR(255),
       payTelNo VARCHAR(255),
       payTelNoWork VARCHAR(255),
       payRelationship VARCHAR(255),
       payOccupation VARCHAR(255),
       primary key (id)
    )

    create table PaymentData (
        id BIGINT NOT NULL AUTO_INCREMENT,
       paymentDate VARCHAR(255),
       paymentTime VARCHAR(255),
       numberOfProcedures INTEGER,
       tax DOUBLE,
       total DOUBLE,
       change DOUBLE,
       userName BIGINT,
       idx INTEGER,
       patientNum BIGINT,
       index3 INTEGER,
       primary key (id)
    )</StdOut>
        <ErrorInfo>
          <Message>Test method TPTest.repository.TestAuthorizer.TestAllAuthorizer threw exception: 
NHibernate.HibernateException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'change DOUBLE, userName BIGINT, idx INTEGER, patientNum BIGINT, index3 INTEGER, ' at line 1 ---&gt; MySql.Data.MySqlClient.MySqlException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'change DOUBLE, userName BIGINT, idx INTEGER, patientNum BIGINT, index3 INTEGER, ' at line 1</Message>
          <StackTrace>    at MySql.Data.MySqlClient.MySqlStream.ReadPacket()
   at MySql.Data.MySqlClient.NativeDriver.GetResult(Int32&amp; affectedRow, Int64&amp; insertedId)
   at MySql.Data.MySqlClient.Driver.GetResult(Int32 statementId, Int32&amp; affectedRows, Int64&amp; insertedId)
   at MySql.Data.MySqlClient.Driver.NextResult(Int32 statementId, Boolean force)
   at MySql.Data.MySqlClient.MySqlDataReader.NextResult()
   at MySql.Data.MySqlClient.MySqlCommand.ExecuteReader(CommandBehavior behavior)
   at MySql.Data.MySqlClient.MySqlCommand.ExecuteNonQuery()
   at NHibernate.Tool.hbm2ddl.SchemaExport.ExecuteSql(IDbCommand cmd, String sql)
   at NHibernate.Tool.hbm2ddl.SchemaExport.Execute(Action`1 scriptAction, Boolean export, Boolean throwOnError, TextWriter exportOutput, IDbCommand statement, String sql)
   at NHibernate.Tool.hbm2ddl.SchemaExport.Execute(Action`1 scriptAction, Boolean export, Boolean justDrop, IDbConnection connection, TextWriter exportOutput)
   at NHibernate.Tool.hbm2ddl.SchemaExport.Execute(Action`1 scriptAction, Boolean export, Boolean justDrop)
 --- End of inner exception stack trace ---
    at NHibernate.Tool.hbm2ddl.SchemaExport.Execute(Action`1 scriptAction, Boolean export, Boolean justDrop)
   at NHibernate.Tool.hbm2ddl.SchemaExport.Execute(Boolean script, Boolean export, Boolean justDrop)
   at TP.Config.ConnectionConfig.loadAuthorizerConfig() in C:\Users\Tino\Desktop\TP\TP\config\ConnectionConfig.cs:line 98
   at TPTest.repository.TestAuthorizer.testCreate() in C:\Users\Tino\Desktop\TP\TPTest\repository\TestAuthorizer.cs:line 28
   at TPTest.repository.TestAuthorizer.TestAllAuthorizer() in C:\Users\Tino\Desktop\TP\TPTest\repository\TestAuthorizer.cs:line 20
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="7f24419c-e37a-4a9f-8c01-a882bb9f380d" testId="6e26cf5a-168a-510e-410f-d0545d2f9604" testName="TestAllPatient" computerName="TINO-PC" duration="00:00:17.1601563" startTime="2014-10-14T13:12:56.8304095-07:00" endTime="2014-10-14T13:13:14.0293932-07:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7f24419c-e37a-4a9f-8c01-a882bb9f380d">
      <Output>
        <StdOut>alter table Treatment  drop foreign key FK36967990506A3C44


    
alter table Appointment  drop foreign key FKBB6A20C0EBCE5ED0


    
alter table PatientAddress  drop foreign key FKB4CD86E1EBCE5ED0


    
alter table PaymentData  drop foreign key FKD434861036646595


    
alter table PaymentData  drop foreign key FKD4348610EBCE5ED0


    
alter table Allergy  drop foreign key FKECE328A61A023E82


    drop table if exists Procedures

    drop table if exists Treatment

    drop table if exists Appointment

    drop table if exists PatientAddress

    drop table if exists MedicalHistory

    drop table if exists Authorizer

    drop table if exists Employee

    drop table if exists NextOfKin

    drop table if exists Payment

    drop table if exists PaymentData

    drop table if exists TerminalUser

    drop table if exists Allergy

    drop table if exists Patient

    create table Procedures (
        id BIGINT NOT NULL AUTO_INCREMENT,
       procedureCode INTEGER,
       procedureName VARCHAR(255),
       procedurePrice DOUBLE,
       primary key (id)
    )

    create table Treatment (
        treatID BIGINT NOT NULL AUTO_INCREMENT,
       treatCode INTEGER,
       treatName VARCHAR(255),
       treatIsUrgent TINYINT(1),
       MedHistId BIGINT,
       TreatIdIndex INTEGER,
       primary key (treatID)
    )

    create table Appointment (
        id BIGINT NOT NULL AUTO_INCREMENT,
       appId VARCHAR(255),
       reasonForVisit VARCHAR(255),
       appDate VARCHAR(255),
       appTime VARCHAR(255),
       patientNum BIGINT,
       index2 INTEGER,
       primary key (id)
    )

    create table PatientAddress (
        id BIGINT NOT NULL AUTO_INCREMENT,
       streetNameNo VARCHAR(255),
       suburb VARCHAR(255),
       city VARCHAR(255),
       postalCode VARCHAR(255),
       addressType VARCHAR(255),
       patientNum BIGINT,
       index1 INTEGER,
       primary key (id)
    )

    create table MedicalHistory (
        MedHistId BIGINT NOT NULL AUTO_INCREMENT,
       rheumaticFever TINYINT(1),
       ifYesRhemDate VARCHAR(255),
       diabetic TINYINT(1),
       pophyris TINYINT(1),
       recentIllnesses TINYINT(1),
       bleeder TINYINT(1),
       additionalInfo VARCHAR(255),
       patientNum VARCHAR(255),
       primary key (MedHistId)
    )

    create table Authorizer (
        id BIGINT NOT NULL AUTO_INCREMENT,
       empNo VARCHAR(255),
       authCode VARCHAR(255),
       secQuestion VARCHAR(255),
       secAnswer VARCHAR(255),
       primary key (id)
    )

    create table Employee (
        id BIGINT NOT NULL AUTO_INCREMENT,
       empId VARCHAR(255),
       empNo VARCHAR(255),
       empName VARCHAR(255),
       empSurname VARCHAR(255),
       empGender VARCHAR(255),
       empAddress VARCHAR(255),
       jobTitle VARCHAR(255),
       empType VARCHAR(255),
       primary key (id)
    )

    create table NextOfKin (
        id BIGINT NOT NULL AUTO_INCREMENT,
       kinSurname VARCHAR(255),
       kinName VARCHAR(255),
       kinAddress VARCHAR(255),
       kinTelNo VARCHAR(255),
       kinRelationship VARCHAR(255),
       patientNum VARCHAR(255),
       primary key (id)
    )

    create table Payment (
        id BIGINT NOT NULL AUTO_INCREMENT,
       paySurname VARCHAR(255),
       payName VARCHAR(255),
       payIdNumber BIGINT,
       payAddress VARCHAR(255),
       payTelNo VARCHAR(255),
       payTelNoWork VARCHAR(255),
       payRelationship VARCHAR(255),
       payOccupation VARCHAR(255),
       primary key (id)
    )

    create table PaymentData (
        id BIGINT NOT NULL AUTO_INCREMENT,
       paymentDate VARCHAR(255),
       paymentTime VARCHAR(255),
       numberOfProcedures INTEGER,
       tax DOUBLE,
       total DOUBLE,
       change DOUBLE,
       userName BIGINT,
       idx INTEGER,
       patientNum BIGINT,
       index3 INTEGER,
       primary key (id)
    )</StdOut>
        <ErrorInfo>
          <Message>Test method TPTest.TestPatient.TestAllPatient threw exception: 
NHibernate.HibernateException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'change DOUBLE, userName BIGINT, idx INTEGER, patientNum BIGINT, index3 INTEGER, ' at line 1 ---&gt; MySql.Data.MySqlClient.MySqlException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'change DOUBLE, userName BIGINT, idx INTEGER, patientNum BIGINT, index3 INTEGER, ' at line 1</Message>
          <StackTrace>    at MySql.Data.MySqlClient.MySqlStream.ReadPacket()
   at MySql.Data.MySqlClient.NativeDriver.GetResult(Int32&amp; affectedRow, Int64&amp; insertedId)
   at MySql.Data.MySqlClient.Driver.GetResult(Int32 statementId, Int32&amp; affectedRows, Int64&amp; insertedId)
   at MySql.Data.MySqlClient.Driver.NextResult(Int32 statementId, Boolean force)
   at MySql.Data.MySqlClient.MySqlDataReader.NextResult()
   at MySql.Data.MySqlClient.MySqlCommand.ExecuteReader(CommandBehavior behavior)
   at MySql.Data.MySqlClient.MySqlCommand.ExecuteNonQuery()
   at NHibernate.Tool.hbm2ddl.SchemaExport.ExecuteSql(IDbCommand cmd, String sql)
   at NHibernate.Tool.hbm2ddl.SchemaExport.Execute(Action`1 scriptAction, Boolean export, Boolean throwOnError, TextWriter exportOutput, IDbCommand statement, String sql)
   at NHibernate.Tool.hbm2ddl.SchemaExport.Execute(Action`1 scriptAction, Boolean export, Boolean justDrop, IDbConnection connection, TextWriter exportOutput)
   at NHibernate.Tool.hbm2ddl.SchemaExport.Execute(Action`1 scriptAction, Boolean export, Boolean justDrop)
 --- End of inner exception stack trace ---
    at NHibernate.Tool.hbm2ddl.SchemaExport.Execute(Action`1 scriptAction, Boolean export, Boolean justDrop)
   at NHibernate.Tool.hbm2ddl.SchemaExport.Execute(Boolean script, Boolean export, Boolean justDrop)
   at TP.Config.ConnectionConfig.loadPatientConfig() in C:\Users\Tino\Desktop\TP\TP\config\ConnectionConfig.cs:line 18
   at TPTest.TestPatient.testCreate() in C:\Users\Tino\Desktop\TP\TPTest\repository\TestPatient.cs:line 31
   at TPTest.TestPatient.TestAllPatient() in C:\Users\Tino\Desktop\TP\TPTest\repository\TestPatient.cs:line 23
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="bd10568d-b2a2-4ac8-872d-fa7710228e39" testId="a4aaea69-8e99-80da-06a2-51caab4d2873" testName="TestAllPatientAddress" computerName="TINO-PC" duration="00:00:09.6880539" startTime="2014-10-14T13:13:14.0753959-07:00" endTime="2014-10-14T13:13:24.0459661-07:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="bd10568d-b2a2-4ac8-872d-fa7710228e39">
      <Output>
        <StdOut>alter table Treatment  drop foreign key FK36967990506A3C44


    
alter table Appointment  drop foreign key FKBB6A20C0EBCE5ED0


    
alter table PatientAddress  drop foreign key FKB4CD86E1EBCE5ED0


    
alter table PaymentData  drop foreign key FKD434861036646595


    
alter table PaymentData  drop foreign key FKD4348610EBCE5ED0


    
alter table Allergy  drop foreign key FKECE328A61A023E82


    drop table if exists Procedures

    drop table if exists Treatment

    drop table if exists Appointment

    drop table if exists PatientAddress

    drop table if exists MedicalHistory

    drop table if exists Authorizer

    drop table if exists Employee

    drop table if exists NextOfKin

    drop table if exists Payment

    drop table if exists PaymentData

    drop table if exists TerminalUser

    drop table if exists Allergy

    drop table if exists Patient

    create table Procedures (
        id BIGINT NOT NULL AUTO_INCREMENT,
       procedureCode INTEGER,
       procedureName VARCHAR(255),
       procedurePrice DOUBLE,
       primary key (id)
    )

    create table Treatment (
        treatID BIGINT NOT NULL AUTO_INCREMENT,
       treatCode INTEGER,
       treatName VARCHAR(255),
       treatIsUrgent TINYINT(1),
       MedHistId BIGINT,
       TreatIdIndex INTEGER,
       primary key (treatID)
    )

    create table Appointment (
        id BIGINT NOT NULL AUTO_INCREMENT,
       appId VARCHAR(255),
       reasonForVisit VARCHAR(255),
       appDate VARCHAR(255),
       appTime VARCHAR(255),
       patientNum BIGINT,
       index2 INTEGER,
       primary key (id)
    )

    create table PatientAddress (
        id BIGINT NOT NULL AUTO_INCREMENT,
       streetNameNo VARCHAR(255),
       suburb VARCHAR(255),
       city VARCHAR(255),
       postalCode VARCHAR(255),
       addressType VARCHAR(255),
       patientNum BIGINT,
       index1 INTEGER,
       primary key (id)
    )

    create table MedicalHistory (
        MedHistId BIGINT NOT NULL AUTO_INCREMENT,
       rheumaticFever TINYINT(1),
       ifYesRhemDate VARCHAR(255),
       diabetic TINYINT(1),
       pophyris TINYINT(1),
       recentIllnesses TINYINT(1),
       bleeder TINYINT(1),
       additionalInfo VARCHAR(255),
       patientNum VARCHAR(255),
       primary key (MedHistId)
    )

    create table Authorizer (
        id BIGINT NOT NULL AUTO_INCREMENT,
       empNo VARCHAR(255),
       authCode VARCHAR(255),
       secQuestion VARCHAR(255),
       secAnswer VARCHAR(255),
       primary key (id)
    )

    create table Employee (
        id BIGINT NOT NULL AUTO_INCREMENT,
       empId VARCHAR(255),
       empNo VARCHAR(255),
       empName VARCHAR(255),
       empSurname VARCHAR(255),
       empGender VARCHAR(255),
       empAddress VARCHAR(255),
       jobTitle VARCHAR(255),
       empType VARCHAR(255),
       primary key (id)
    )

    create table NextOfKin (
        id BIGINT NOT NULL AUTO_INCREMENT,
       kinSurname VARCHAR(255),
       kinName VARCHAR(255),
       kinAddress VARCHAR(255),
       kinTelNo VARCHAR(255),
       kinRelationship VARCHAR(255),
       patientNum VARCHAR(255),
       primary key (id)
    )

    create table Payment (
        id BIGINT NOT NULL AUTO_INCREMENT,
       paySurname VARCHAR(255),
       payName VARCHAR(255),
       payIdNumber BIGINT,
       payAddress VARCHAR(255),
       payTelNo VARCHAR(255),
       payTelNoWork VARCHAR(255),
       payRelationship VARCHAR(255),
       payOccupation VARCHAR(255),
       primary key (id)
    )

    create table PaymentData (
        id BIGINT NOT NULL AUTO_INCREMENT,
       paymentDate VARCHAR(255),
       paymentTime VARCHAR(255),
       numberOfProcedures INTEGER,
       tax DOUBLE,
       total DOUBLE,
       change DOUBLE,
       userName BIGINT,
       idx INTEGER,
       patientNum BIGINT,
       index3 INTEGER,
       primary key (id)
    )</StdOut>
        <ErrorInfo>
          <Message>Test method TPTest.repository.TestPatientAddress.TestAllPatientAddress threw exception: 
NHibernate.HibernateException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'change DOUBLE, userName BIGINT, idx INTEGER, patientNum BIGINT, index3 INTEGER, ' at line 1 ---&gt; MySql.Data.MySqlClient.MySqlException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'change DOUBLE, userName BIGINT, idx INTEGER, patientNum BIGINT, index3 INTEGER, ' at line 1</Message>
          <StackTrace>    at MySql.Data.MySqlClient.MySqlStream.ReadPacket()
   at MySql.Data.MySqlClient.NativeDriver.GetResult(Int32&amp; affectedRow, Int64&amp; insertedId)
   at MySql.Data.MySqlClient.Driver.GetResult(Int32 statementId, Int32&amp; affectedRows, Int64&amp; insertedId)
   at MySql.Data.MySqlClient.Driver.NextResult(Int32 statementId, Boolean force)
   at MySql.Data.MySqlClient.MySqlDataReader.NextResult()
   at MySql.Data.MySqlClient.MySqlCommand.ExecuteReader(CommandBehavior behavior)
   at MySql.Data.MySqlClient.MySqlCommand.ExecuteNonQuery()
   at NHibernate.Tool.hbm2ddl.SchemaExport.ExecuteSql(IDbCommand cmd, String sql)
   at NHibernate.Tool.hbm2ddl.SchemaExport.Execute(Action`1 scriptAction, Boolean export, Boolean throwOnError, TextWriter exportOutput, IDbCommand statement, String sql)
   at NHibernate.Tool.hbm2ddl.SchemaExport.Execute(Action`1 scriptAction, Boolean export, Boolean justDrop, IDbConnection connection, TextWriter exportOutput)
   at NHibernate.Tool.hbm2ddl.SchemaExport.Execute(Action`1 scriptAction, Boolean export, Boolean justDrop)
 --- End of inner exception stack trace ---
    at NHibernate.Tool.hbm2ddl.SchemaExport.Execute(Action`1 scriptAction, Boolean export, Boolean justDrop)
   at NHibernate.Tool.hbm2ddl.SchemaExport.Execute(Boolean script, Boolean export, Boolean justDrop)
   at TP.Config.ConnectionConfig.loadPatientConfig() in C:\Users\Tino\Desktop\TP\TP\config\ConnectionConfig.cs:line 18
   at TPTest.repository.TestPatientAddress.testCreate() in C:\Users\Tino\Desktop\TP\TPTest\repository\TestPatientAddress.cs:line 30
   at TPTest.repository.TestPatientAddress.TestAllPatientAddress() in C:\Users\Tino\Desktop\TP\TPTest\repository\TestPatientAddress.cs:line 22
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="051e0579-2def-46e1-a2fc-67939dc4ad72" testId="d023ff9b-12c5-5440-f6f4-f338c74d902d" testName="TestAllPayment" computerName="TINO-PC" duration="00:00:13.5286708" startTime="2014-10-14T13:13:24.0729677-07:00" endTime="2014-10-14T13:13:37.6207426-07:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="051e0579-2def-46e1-a2fc-67939dc4ad72">
      <Output>
        <StdOut>alter table Treatment  drop foreign key FK36967990506A3C44


    
alter table Appointment  drop foreign key FKBB6A20C0EBCE5ED0


    
alter table PatientAddress  drop foreign key FKB4CD86E1EBCE5ED0


    
alter table PaymentData  drop foreign key FKD434861036646595


    
alter table PaymentData  drop foreign key FKD4348610EBCE5ED0


    
alter table Allergy  drop foreign key FKECE328A61A023E82


    drop table if exists Procedures

    drop table if exists Treatment

    drop table if exists Appointment

    drop table if exists PatientAddress

    drop table if exists MedicalHistory

    drop table if exists Authorizer

    drop table if exists Employee

    drop table if exists NextOfKin

    drop table if exists Payment

    drop table if exists PaymentData

    drop table if exists TerminalUser

    drop table if exists Allergy

    drop table if exists Patient

    create table Procedures (
        id BIGINT NOT NULL AUTO_INCREMENT,
       procedureCode INTEGER,
       procedureName VARCHAR(255),
       procedurePrice DOUBLE,
       primary key (id)
    )

    create table Treatment (
        treatID BIGINT NOT NULL AUTO_INCREMENT,
       treatCode INTEGER,
       treatName VARCHAR(255),
       treatIsUrgent TINYINT(1),
       MedHistId BIGINT,
       TreatIdIndex INTEGER,
       primary key (treatID)
    )

    create table Appointment (
        id BIGINT NOT NULL AUTO_INCREMENT,
       appId VARCHAR(255),
       reasonForVisit VARCHAR(255),
       appDate VARCHAR(255),
       appTime VARCHAR(255),
       patientNum BIGINT,
       index2 INTEGER,
       primary key (id)
    )

    create table PatientAddress (
        id BIGINT NOT NULL AUTO_INCREMENT,
       streetNameNo VARCHAR(255),
       suburb VARCHAR(255),
       city VARCHAR(255),
       postalCode VARCHAR(255),
       addressType VARCHAR(255),
       patientNum BIGINT,
       index1 INTEGER,
       primary key (id)
    )

    create table MedicalHistory (
        MedHistId BIGINT NOT NULL AUTO_INCREMENT,
       rheumaticFever TINYINT(1),
       ifYesRhemDate VARCHAR(255),
       diabetic TINYINT(1),
       pophyris TINYINT(1),
       recentIllnesses TINYINT(1),
       bleeder TINYINT(1),
       additionalInfo VARCHAR(255),
       patientNum VARCHAR(255),
       primary key (MedHistId)
    )

    create table Authorizer (
        id BIGINT NOT NULL AUTO_INCREMENT,
       empNo VARCHAR(255),
       authCode VARCHAR(255),
       secQuestion VARCHAR(255),
       secAnswer VARCHAR(255),
       primary key (id)
    )

    create table Employee (
        id BIGINT NOT NULL AUTO_INCREMENT,
       empId VARCHAR(255),
       empNo VARCHAR(255),
       empName VARCHAR(255),
       empSurname VARCHAR(255),
       empGender VARCHAR(255),
       empAddress VARCHAR(255),
       jobTitle VARCHAR(255),
       empType VARCHAR(255),
       primary key (id)
    )

    create table NextOfKin (
        id BIGINT NOT NULL AUTO_INCREMENT,
       kinSurname VARCHAR(255),
       kinName VARCHAR(255),
       kinAddress VARCHAR(255),
       kinTelNo VARCHAR(255),
       kinRelationship VARCHAR(255),
       patientNum VARCHAR(255),
       primary key (id)
    )

    create table Payment (
        id BIGINT NOT NULL AUTO_INCREMENT,
       paySurname VARCHAR(255),
       payName VARCHAR(255),
       payIdNumber BIGINT,
       payAddress VARCHAR(255),
       payTelNo VARCHAR(255),
       payTelNoWork VARCHAR(255),
       payRelationship VARCHAR(255),
       payOccupation VARCHAR(255),
       primary key (id)
    )

    create table PaymentData (
        id BIGINT NOT NULL AUTO_INCREMENT,
       paymentDate VARCHAR(255),
       paymentTime VARCHAR(255),
       numberOfProcedures INTEGER,
       tax DOUBLE,
       total DOUBLE,
       change DOUBLE,
       userName BIGINT,
       idx INTEGER,
       patientNum BIGINT,
       index3 INTEGER,
       primary key (id)
    )</StdOut>
        <ErrorInfo>
          <Message>Test method TPTest.Repository.TestPayment.TestAllPayment threw exception: 
NHibernate.HibernateException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'change DOUBLE, userName BIGINT, idx INTEGER, patientNum BIGINT, index3 INTEGER, ' at line 1 ---&gt; MySql.Data.MySqlClient.MySqlException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'change DOUBLE, userName BIGINT, idx INTEGER, patientNum BIGINT, index3 INTEGER, ' at line 1</Message>
          <StackTrace>    at MySql.Data.MySqlClient.MySqlStream.ReadPacket()
   at MySql.Data.MySqlClient.NativeDriver.GetResult(Int32&amp; affectedRow, Int64&amp; insertedId)
   at MySql.Data.MySqlClient.Driver.GetResult(Int32 statementId, Int32&amp; affectedRows, Int64&amp; insertedId)
   at MySql.Data.MySqlClient.Driver.NextResult(Int32 statementId, Boolean force)
   at MySql.Data.MySqlClient.MySqlDataReader.NextResult()
   at MySql.Data.MySqlClient.MySqlCommand.ExecuteReader(CommandBehavior behavior)
   at MySql.Data.MySqlClient.MySqlCommand.ExecuteNonQuery()
   at NHibernate.Tool.hbm2ddl.SchemaExport.ExecuteSql(IDbCommand cmd, String sql)
   at NHibernate.Tool.hbm2ddl.SchemaExport.Execute(Action`1 scriptAction, Boolean export, Boolean throwOnError, TextWriter exportOutput, IDbCommand statement, String sql)
   at NHibernate.Tool.hbm2ddl.SchemaExport.Execute(Action`1 scriptAction, Boolean export, Boolean justDrop, IDbConnection connection, TextWriter exportOutput)
   at NHibernate.Tool.hbm2ddl.SchemaExport.Execute(Action`1 scriptAction, Boolean export, Boolean justDrop)
 --- End of inner exception stack trace ---
    at NHibernate.Tool.hbm2ddl.SchemaExport.Execute(Action`1 scriptAction, Boolean export, Boolean justDrop)
   at NHibernate.Tool.hbm2ddl.SchemaExport.Execute(Boolean script, Boolean export, Boolean justDrop)
   at TP.Config.ConnectionConfig.loadPaymentConfig() in C:\Users\Tino\Desktop\TP\TP\config\ConnectionConfig.cs:line 58
   at TPTest.Repository.TestPayment.testCreate() in C:\Users\Tino\Desktop\TP\TPTest\repository\TestPayment.cs:line 28
   at TPTest.Repository.TestPayment.TestAllPayment() in C:\Users\Tino\Desktop\TP\TPTest\repository\TestPayment.cs:line 20
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="e47aebf0-4852-4247-a750-4ba16a6b27c8" testId="ef02c3d0-ff67-1dfc-598e-2b27d85d78c5" testName="TestAllPaymentData" computerName="TINO-PC" duration="00:00:15.9779473" startTime="2014-10-14T13:13:37.6437439-07:00" endTime="2014-10-14T13:13:53.6466592-07:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e47aebf0-4852-4247-a750-4ba16a6b27c8">
      <Output>
        <StdOut>alter table Treatment  drop foreign key FK36967990506A3C44


    
alter table Appointment  drop foreign key FKBB6A20C0EBCE5ED0


    
alter table PatientAddress  drop foreign key FKB4CD86E1EBCE5ED0


    
alter table PaymentData  drop foreign key FKD434861036646595


    
alter table PaymentData  drop foreign key FKD4348610EBCE5ED0


    
alter table Allergy  drop foreign key FKECE328A61A023E82


    drop table if exists Procedures

    drop table if exists Treatment

    drop table if exists Appointment

    drop table if exists PatientAddress

    drop table if exists MedicalHistory

    drop table if exists Authorizer

    drop table if exists Employee

    drop table if exists NextOfKin

    drop table if exists Payment

    drop table if exists PaymentData

    drop table if exists TerminalUser

    drop table if exists Allergy

    drop table if exists Patient

    create table Procedures (
        id BIGINT NOT NULL AUTO_INCREMENT,
       procedureCode INTEGER,
       procedureName VARCHAR(255),
       procedurePrice DOUBLE,
       primary key (id)
    )

    create table Treatment (
        treatID BIGINT NOT NULL AUTO_INCREMENT,
       treatCode INTEGER,
       treatName VARCHAR(255),
       treatIsUrgent TINYINT(1),
       MedHistId BIGINT,
       TreatIdIndex INTEGER,
       primary key (treatID)
    )

    create table Appointment (
        id BIGINT NOT NULL AUTO_INCREMENT,
       appId VARCHAR(255),
       reasonForVisit VARCHAR(255),
       appDate VARCHAR(255),
       appTime VARCHAR(255),
       patientNum BIGINT,
       index2 INTEGER,
       primary key (id)
    )

    create table PatientAddress (
        id BIGINT NOT NULL AUTO_INCREMENT,
       streetNameNo VARCHAR(255),
       suburb VARCHAR(255),
       city VARCHAR(255),
       postalCode VARCHAR(255),
       addressType VARCHAR(255),
       patientNum BIGINT,
       index1 INTEGER,
       primary key (id)
    )

    create table MedicalHistory (
        MedHistId BIGINT NOT NULL AUTO_INCREMENT,
       rheumaticFever TINYINT(1),
       ifYesRhemDate VARCHAR(255),
       diabetic TINYINT(1),
       pophyris TINYINT(1),
       recentIllnesses TINYINT(1),
       bleeder TINYINT(1),
       additionalInfo VARCHAR(255),
       patientNum VARCHAR(255),
       primary key (MedHistId)
    )

    create table Authorizer (
        id BIGINT NOT NULL AUTO_INCREMENT,
       empNo VARCHAR(255),
       authCode VARCHAR(255),
       secQuestion VARCHAR(255),
       secAnswer VARCHAR(255),
       primary key (id)
    )

    create table Employee (
        id BIGINT NOT NULL AUTO_INCREMENT,
       empId VARCHAR(255),
       empNo VARCHAR(255),
       empName VARCHAR(255),
       empSurname VARCHAR(255),
       empGender VARCHAR(255),
       empAddress VARCHAR(255),
       jobTitle VARCHAR(255),
       empType VARCHAR(255),
       primary key (id)
    )

    create table NextOfKin (
        id BIGINT NOT NULL AUTO_INCREMENT,
       kinSurname VARCHAR(255),
       kinName VARCHAR(255),
       kinAddress VARCHAR(255),
       kinTelNo VARCHAR(255),
       kinRelationship VARCHAR(255),
       patientNum VARCHAR(255),
       primary key (id)
    )

    create table Payment (
        id BIGINT NOT NULL AUTO_INCREMENT,
       paySurname VARCHAR(255),
       payName VARCHAR(255),
       payIdNumber BIGINT,
       payAddress VARCHAR(255),
       payTelNo VARCHAR(255),
       payTelNoWork VARCHAR(255),
       payRelationship VARCHAR(255),
       payOccupation VARCHAR(255),
       primary key (id)
    )

    create table PaymentData (
        id BIGINT NOT NULL AUTO_INCREMENT,
       paymentDate VARCHAR(255),
       paymentTime VARCHAR(255),
       numberOfProcedures INTEGER,
       tax DOUBLE,
       total DOUBLE,
       change DOUBLE,
       userName BIGINT,
       idx INTEGER,
       patientNum BIGINT,
       index3 INTEGER,
       primary key (id)
    )</StdOut>
        <ErrorInfo>
          <Message>Test method TPTest.Repository.TestPaymentData.TestAllPaymentData threw exception: 
NHibernate.HibernateException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'change DOUBLE, userName BIGINT, idx INTEGER, patientNum BIGINT, index3 INTEGER, ' at line 1 ---&gt; MySql.Data.MySqlClient.MySqlException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'change DOUBLE, userName BIGINT, idx INTEGER, patientNum BIGINT, index3 INTEGER, ' at line 1</Message>
          <StackTrace>    at MySql.Data.MySqlClient.MySqlStream.ReadPacket()
   at MySql.Data.MySqlClient.NativeDriver.GetResult(Int32&amp; affectedRow, Int64&amp; insertedId)
   at MySql.Data.MySqlClient.Driver.GetResult(Int32 statementId, Int32&amp; affectedRows, Int64&amp; insertedId)
   at MySql.Data.MySqlClient.Driver.NextResult(Int32 statementId, Boolean force)
   at MySql.Data.MySqlClient.MySqlDataReader.NextResult()
   at MySql.Data.MySqlClient.MySqlCommand.ExecuteReader(CommandBehavior behavior)
   at MySql.Data.MySqlClient.MySqlCommand.ExecuteNonQuery()
   at NHibernate.Tool.hbm2ddl.SchemaExport.ExecuteSql(IDbCommand cmd, String sql)
   at NHibernate.Tool.hbm2ddl.SchemaExport.Execute(Action`1 scriptAction, Boolean export, Boolean throwOnError, TextWriter exportOutput, IDbCommand statement, String sql)
   at NHibernate.Tool.hbm2ddl.SchemaExport.Execute(Action`1 scriptAction, Boolean export, Boolean justDrop, IDbConnection connection, TextWriter exportOutput)
   at NHibernate.Tool.hbm2ddl.SchemaExport.Execute(Action`1 scriptAction, Boolean export, Boolean justDrop)
 --- End of inner exception stack trace ---
    at NHibernate.Tool.hbm2ddl.SchemaExport.Execute(Action`1 scriptAction, Boolean export, Boolean justDrop)
   at NHibernate.Tool.hbm2ddl.SchemaExport.Execute(Boolean script, Boolean export, Boolean justDrop)
   at TP.Config.ConnectionConfig.loadPaymentDataConfig() in C:\Users\Tino\Desktop\TP\TP\config\ConnectionConfig.cs:line 66
   at TPTest.Repository.TestPaymentData.testCreate() in C:\Users\Tino\Desktop\TP\TPTest\repository\TestPaymentData.cs:line 28
   at TPTest.Repository.TestPaymentData.TestAllPaymentData() in C:\Users\Tino\Desktop\TP\TPTest\repository\TestPaymentData.cs:line 20
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="cd56f6c3-3262-458d-9b12-820c08fe8882" testId="f44b82e6-9fa6-66d0-f37d-d7eea6349f41" testName="TestAllEmployee" computerName="TINO-PC" duration="00:00:19.0878868" startTime="2014-10-14T13:13:53.7306640-07:00" endTime="2014-10-14T13:14:12.8457573-07:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="cd56f6c3-3262-458d-9b12-820c08fe8882">
      <Output>
        <StdOut>alter table Treatment  drop foreign key FK36967990506A3C44


    
alter table Appointment  drop foreign key FKBB6A20C0EBCE5ED0


    
alter table PatientAddress  drop foreign key FKB4CD86E1EBCE5ED0


    
alter table PaymentData  drop foreign key FKD434861036646595


    
alter table PaymentData  drop foreign key FKD4348610EBCE5ED0


    
alter table Allergy  drop foreign key FKECE328A61A023E82


    drop table if exists Procedures

    drop table if exists Treatment

    drop table if exists Appointment

    drop table if exists PatientAddress

    drop table if exists MedicalHistory

    drop table if exists Authorizer

    drop table if exists Employee

    drop table if exists NextOfKin

    drop table if exists Payment

    drop table if exists PaymentData

    drop table if exists TerminalUser

    drop table if exists Allergy

    drop table if exists Patient

    create table Procedures (
        id BIGINT NOT NULL AUTO_INCREMENT,
       procedureCode INTEGER,
       procedureName VARCHAR(255),
       procedurePrice DOUBLE,
       primary key (id)
    )

    create table Treatment (
        treatID BIGINT NOT NULL AUTO_INCREMENT,
       treatCode INTEGER,
       treatName VARCHAR(255),
       treatIsUrgent TINYINT(1),
       MedHistId BIGINT,
       TreatIdIndex INTEGER,
       primary key (treatID)
    )

    create table Appointment (
        id BIGINT NOT NULL AUTO_INCREMENT,
       appId VARCHAR(255),
       reasonForVisit VARCHAR(255),
       appDate VARCHAR(255),
       appTime VARCHAR(255),
       patientNum BIGINT,
       index2 INTEGER,
       primary key (id)
    )

    create table PatientAddress (
        id BIGINT NOT NULL AUTO_INCREMENT,
       streetNameNo VARCHAR(255),
       suburb VARCHAR(255),
       city VARCHAR(255),
       postalCode VARCHAR(255),
       addressType VARCHAR(255),
       patientNum BIGINT,
       index1 INTEGER,
       primary key (id)
    )

    create table MedicalHistory (
        MedHistId BIGINT NOT NULL AUTO_INCREMENT,
       rheumaticFever TINYINT(1),
       ifYesRhemDate VARCHAR(255),
       diabetic TINYINT(1),
       pophyris TINYINT(1),
       recentIllnesses TINYINT(1),
       bleeder TINYINT(1),
       additionalInfo VARCHAR(255),
       patientNum VARCHAR(255),
       primary key (MedHistId)
    )

    create table Authorizer (
        id BIGINT NOT NULL AUTO_INCREMENT,
       empNo VARCHAR(255),
       authCode VARCHAR(255),
       secQuestion VARCHAR(255),
       secAnswer VARCHAR(255),
       primary key (id)
    )

    create table Employee (
        id BIGINT NOT NULL AUTO_INCREMENT,
       empId VARCHAR(255),
       empNo VARCHAR(255),
       empName VARCHAR(255),
       empSurname VARCHAR(255),
       empGender VARCHAR(255),
       empAddress VARCHAR(255),
       jobTitle VARCHAR(255),
       empType VARCHAR(255),
       primary key (id)
    )

    create table NextOfKin (
        id BIGINT NOT NULL AUTO_INCREMENT,
       kinSurname VARCHAR(255),
       kinName VARCHAR(255),
       kinAddress VARCHAR(255),
       kinTelNo VARCHAR(255),
       kinRelationship VARCHAR(255),
       patientNum VARCHAR(255),
       primary key (id)
    )

    create table Payment (
        id BIGINT NOT NULL AUTO_INCREMENT,
       paySurname VARCHAR(255),
       payName VARCHAR(255),
       payIdNumber BIGINT,
       payAddress VARCHAR(255),
       payTelNo VARCHAR(255),
       payTelNoWork VARCHAR(255),
       payRelationship VARCHAR(255),
       payOccupation VARCHAR(255),
       primary key (id)
    )

    create table PaymentData (
        id BIGINT NOT NULL AUTO_INCREMENT,
       paymentDate VARCHAR(255),
       paymentTime VARCHAR(255),
       numberOfProcedures INTEGER,
       tax DOUBLE,
       total DOUBLE,
       change DOUBLE,
       userName BIGINT,
       idx INTEGER,
       patientNum BIGINT,
       index3 INTEGER,
       primary key (id)
    )</StdOut>
        <ErrorInfo>
          <Message>Test method TPTest.Repository.TestEmployee.TestAllEmployee threw exception: 
NHibernate.HibernateException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'change DOUBLE, userName BIGINT, idx INTEGER, patientNum BIGINT, index3 INTEGER, ' at line 1 ---&gt; MySql.Data.MySqlClient.MySqlException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'change DOUBLE, userName BIGINT, idx INTEGER, patientNum BIGINT, index3 INTEGER, ' at line 1</Message>
          <StackTrace>    at MySql.Data.MySqlClient.MySqlStream.ReadPacket()
   at MySql.Data.MySqlClient.NativeDriver.GetResult(Int32&amp; affectedRow, Int64&amp; insertedId)
   at MySql.Data.MySqlClient.Driver.GetResult(Int32 statementId, Int32&amp; affectedRows, Int64&amp; insertedId)
   at MySql.Data.MySqlClient.Driver.NextResult(Int32 statementId, Boolean force)
   at MySql.Data.MySqlClient.MySqlDataReader.NextResult()
   at MySql.Data.MySqlClient.MySqlCommand.ExecuteReader(CommandBehavior behavior)
   at MySql.Data.MySqlClient.MySqlCommand.ExecuteNonQuery()
   at NHibernate.Tool.hbm2ddl.SchemaExport.ExecuteSql(IDbCommand cmd, String sql)
   at NHibernate.Tool.hbm2ddl.SchemaExport.Execute(Action`1 scriptAction, Boolean export, Boolean throwOnError, TextWriter exportOutput, IDbCommand statement, String sql)
   at NHibernate.Tool.hbm2ddl.SchemaExport.Execute(Action`1 scriptAction, Boolean export, Boolean justDrop, IDbConnection connection, TextWriter exportOutput)
   at NHibernate.Tool.hbm2ddl.SchemaExport.Execute(Action`1 scriptAction, Boolean export, Boolean justDrop)
 --- End of inner exception stack trace ---
    at NHibernate.Tool.hbm2ddl.SchemaExport.Execute(Action`1 scriptAction, Boolean export, Boolean justDrop)
   at NHibernate.Tool.hbm2ddl.SchemaExport.Execute(Boolean script, Boolean export, Boolean justDrop)
   at TP.Config.ConnectionConfig.loadEmployeeConfig() in C:\Users\Tino\Desktop\TP\TP\config\ConnectionConfig.cs:line 42
   at TPTest.Repository.TestEmployee.testCreate() in C:\Users\Tino\Desktop\TP\TPTest\repository\TestEmployee.cs:line 28
   at TPTest.Repository.TestEmployee.TestAllEmployee() in C:\Users\Tino\Desktop\TP\TPTest\repository\TestEmployee.cs:line 20
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
  </Results>
</TestRun>