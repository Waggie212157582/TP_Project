using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using TP;
using TP.Config;
using TP.Domain;
using TP.Repository;
using System.Collections;

namespace TPTest
{
    [TestClass]
    public class TestPatient
    {
        long id;
        PatientRepository repo = new PatientRepository();

        [TestMethod()]
        public void TestAllPatient()
        {
            testCreate();
            testRead();
            testUpdate();
            testDelete();
        }

        public void testCreate()
        {
            ConnectionConfig.loadPatientConfig();
            ISet<PatientAddress> addressList = new HashSet<PatientAddress>();
            PatientAddress address1 = new PatientAddress();
            address1.addressType = "I dont know what must be here";
            address1.city = "Cape Town";
            address1.postalCode = "9987";
            address1.streetNameNo = "94 100 Acre Wood";
            address1.suburb = "Poo-land";

            PatientAddress address2 = new PatientAddress();
            address2.addressType = "I dont know what must be here";
            address2.city = "Johannesburg";
            address2.postalCode = "7899";
            address2.streetNameNo = "94 100 Acre Wood";
            address2.suburb = "Poo-land";

            addressList.Add(address1);
            addressList.Add(address2);

            NextOfKin nextOfKin = new NextOfKin();
            nextOfKin.kinAddress = "Somehwere";
            nextOfKin.kinName = "Cassandra";
            nextOfKin.kinRelationship = "NO SQL database";
            nextOfKin.kinSurname = ".db";
            nextOfKin.kinTelNo = "999-888-777";

            MedicalHistory medicalHistory = new MedicalHistory();
            medicalHistory.additionalInfo = "none";
            medicalHistory.bleeder = false;
            medicalHistory.diabetic = true;
            medicalHistory.ifYesRhemDate = "Last Night";
            medicalHistory.pophyris = false;
            medicalHistory.recentIllnesses = false;
            medicalHistory.rheumaticFever = false;

            Payment payment = new Payment();
            payment.payAddress = "Somewhere";
            payment.payIdNumber = 12345698745;
            payment.payName = "Boniface";
            payment.payOccupation = "None";
            payment.payRelationship = "None";
            payment.paySurname = "Kabaso";
            payment.payTelNo = "none";
            payment.payTelNoWork = "none";

            PaymentData paymentData1 = new PaymentData();
            paymentData1.numberOfProcedures = 3;
            paymentData1.paymentDate = DateTime.Today.ToLongDateString();
            paymentData1.paymentRefNo = "#444455";
            paymentData1.paymentTime = DateTime.Now.ToLongTimeString();
            paymentData1.tax = 0.14;
            paymentData1.total = 400.50;
            paymentData1.changes = 0.00;

            PaymentData paymentData2 = new PaymentData();
            paymentData2.numberOfProcedures = 5;
            paymentData2.paymentDate = DateTime.Today.ToLongDateString();
            paymentData2.paymentRefNo = "#98654";
            paymentData2.paymentTime = DateTime.Now.ToLongTimeString();
            paymentData2.tax = 0.14;
            paymentData2.total = 900.50;
            paymentData2.changes = 0.00;

            ISet<PaymentData> paymentDataList = new HashSet<PaymentData>();
            paymentDataList.Add(paymentData1);
            paymentDataList.Add(paymentData2);
            
            Patient patient = new Patient();
            patient.firstName = "Boniface";
            patient.surname = "Kabaso";
            patient.gender = "male";
            patient.idNum = "1111111111111";
            patient.maritalStatus = "Married";
            patient.patientNum = "Auto-generated By Meena";
            patient.telNo = "2125515";
            patient.workTelNo = "(021) 165 5566";
            patient.refferedBy = "Tino";
            patient.patientAddresses = addressList;
            patient.nextOfKin = nextOfKin;
            patient.medicalHistory = medicalHistory;
            patient.payment = payment;
            patient.paymentData = paymentDataList;
            repo.save(patient);
            id = patient.id;
            Assert.IsNotNull(id);
        }

        public void testRead()
        {
            Patient patient = repo.findById(id);
            Assert.AreEqual("NO SQL database", patient.nextOfKin.kinRelationship);
        }

        public void testUpdate()
        {
            Patient patient = repo.findById(id);
            patient.idNum = "9999999999999";
            repo.update(patient);
            Patient updatedPatient = repo.findById(id);
            Assert.AreEqual("9999999999999", updatedPatient.idNum);
        }

        public void testDelete()
        {
            Patient patient = repo.findById(id);
            repo.remove(patient);

            Patient deletedPatient = repo.findById(id);
            Assert.IsNull(deletedPatient);
        }
    }
}
